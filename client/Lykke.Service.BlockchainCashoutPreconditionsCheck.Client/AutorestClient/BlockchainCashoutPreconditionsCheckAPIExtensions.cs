// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlockchainCashoutPreconditionsCheckAPI.
    /// </summary>
    public static partial class BlockchainCashoutPreconditionsCheckAPIExtensions
    {
            /// <summary>
            /// is address black listed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='blockedAddress'>
            /// </param>
            public static object IsBlocked(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, string blockedAddress)
            {
                return operations.IsBlockedAsync(blockchainType, blockedAddress).GetAwaiter().GetResult();
            }

            /// <summary>
            /// is address black listed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='blockedAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsBlockedAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, string blockedAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsBlockedWithHttpMessagesAsync(blockchainType, blockedAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// is address black listed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='blockedAddress'>
            /// </param>
            public static object Get(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, string blockedAddress)
            {
                return operations.GetAsync(blockchainType, blockedAddress).GetAwaiter().GetResult();
            }

            /// <summary>
            /// is address black listed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='blockedAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, string blockedAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(blockchainType, blockedAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete black listed address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='blockedAddress'>
            /// </param>
            public static ErrorResponse Delete(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, string blockedAddress)
            {
                return operations.DeleteAsync(blockchainType, blockedAddress).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete black listed address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='blockedAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, string blockedAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(blockchainType, blockedAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Take blocked addresses for specific blockchainType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            public static object GetAll(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, int? take = default(int?), string continuationToken = default(string))
            {
                return operations.GetAllAsync(blockchainType, take, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Take blocked addresses for specific blockchainType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainType'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='continuationToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, string blockchainType, int? take = default(int?), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(blockchainType, take, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add black listed address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ErrorResponse Update(this IBlockchainCashoutPreconditionsCheckAPI operations, AddBlackListModel request = default(AddBlackListModel))
            {
                return operations.UpdateAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add black listed address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> UpdateAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, AddBlackListModel request = default(AddBlackListModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add black listed address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ErrorResponse Add(this IBlockchainCashoutPreconditionsCheckAPI operations, AddBlackListModel request = default(AddBlackListModel))
            {
                return operations.AddAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add black listed address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AddAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, AddBlackListModel request = default(AddBlackListModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='destinationAddress'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static object Check(this IBlockchainCashoutPreconditionsCheckAPI operations, string assetId, decimal? amount, string destinationAddress, System.Guid? clientId = default(System.Guid?))
            {
                return operations.CheckAsync(assetId, amount, destinationAddress, clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='destinationAddress'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CheckAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, string assetId, decimal? amount, string destinationAddress, System.Guid? clientId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckWithHttpMessagesAsync(assetId, amount, destinationAddress, clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IBlockchainCashoutPreconditionsCheckAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IBlockchainCashoutPreconditionsCheckAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
