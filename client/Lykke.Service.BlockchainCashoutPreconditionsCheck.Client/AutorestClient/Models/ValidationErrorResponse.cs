// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ValidationErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ValidationErrorResponse class.
        /// </summary>
        public ValidationErrorResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ValidationErrorResponse class.
        /// </summary>
        /// <param name="type">Possible values include: 'None',
        /// 'AddressIsNotValid', 'FieldIsNotValid', 'LessThanMinCashout',
        /// 'HotwalletTargetProhibited', 'BlackListedAddress',
        /// 'DepositAddressNotFound', 'CashoutToSelfAddress'</param>
        public ValidationErrorResponse(ValidationErrorType type, string value)
        {
            Type = type;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'None', 'AddressIsNotValid',
        /// 'FieldIsNotValid', 'LessThanMinCashout',
        /// 'HotwalletTargetProhibited', 'BlackListedAddress',
        /// 'DepositAddressNotFound', 'CashoutToSelfAddress'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public ValidationErrorType Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
