<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lykke.Service.BlockchainCashoutPreconditionsCheck.Client</name>
    </assembly>
    <members>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.BlockchainCashoutPreconditionsCheckClient.ValidateCashoutAsync(Lykke.Service.BlockchainCashoutPreconditionsCheck.Contract.Requests.CheckCashoutValidityModel)">
            <summary>
            Checks whether or not cashout to the destination address is allowed
            </summary>
            <param name="validateCashoutModel"></param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.BlockchainCashoutPreconditionsCheckClient.AddToBlackListAsync(Lykke.Service.BlockchainCashoutPreconditionsCheck.Contract.Requests.AddBlackListModel)">
            <summary>
            Add new address to the specific blockchain type black list
            </summary>
            <param name="blackListModel"></param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.BlockchainCashoutPreconditionsCheckClient.GetBlackListAsync(System.String,System.String)">
            <summary>
            Get address from specific blockchain type black list
            </summary>
            <param name="blockchainType">Blockchain Type from Integration Layer</param>
            /// <param name="address">Address</param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.BlockchainCashoutPreconditionsCheckClient.GetAllBlackListsAsync(System.String,System.Int32,System.String)">
            <summary>
            Get address from specific blockchain type black list
            </summary>
            <param name="blockchainType">Blockchain Type from Integration Layer</param>
            /// <param name="address">Address</param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.BlockchainCashoutPreconditionsCheckClient.DeleteBlackListAsync(System.String,System.String)">
            <summary>
            Delete address from specific blockchain type black list
            </summary>
            <param name="blockchainType">Blockchain Type from Integration Layer</param>
            /// <param name="address">Address to delete from black list</param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="T:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi">
            <inheritdoc />
        </member>
        <member name="P:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.Client">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.#ctor(System.Net.Http.HttpClient,Refit.IRequestBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.UpdateBlackListAsync(Lykke.Service.BlockchainCashoutPreconditionsCheck.Contract.Requests.AddBlackListModel)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.CreateBlackListAsync(Lykke.Service.BlockchainCashoutPreconditionsCheck.Contract.Requests.AddBlackListModel)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.DeleteBlackListAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.GetBlackListAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.GetBlackListsAsync(System.String,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.IsBlockedAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.CashoutCheckAsync(Lykke.Service.BlockchainCashoutPreconditionsCheck.Contract.Requests.CheckCashoutValidityModel)">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.ClientGenerator.AutoGeneratedIBlockchainCashoutPreconditionsCheckApi.GetIsAliveAsync">
            <inheritdoc />
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.IBlockchainCashoutPreconditionsCheckClient.ValidateCashoutAsync(Lykke.Service.BlockchainCashoutPreconditionsCheck.Contract.Requests.CheckCashoutValidityModel)">
            <summary>
            Checks whether or not cashout to the destination address is allowed
            </summary>
            <param name="validateCashoutModel"></param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.IBlockchainCashoutPreconditionsCheckClient.AddToBlackListAsync(Lykke.Service.BlockchainCashoutPreconditionsCheck.Contract.Requests.AddBlackListModel)">
            <summary>
            Add new address to the specific blockchain type black list
            </summary>
            <param name="blackListModel"></param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.IBlockchainCashoutPreconditionsCheckClient.GetBlackListAsync(System.String,System.String)">
            <summary>
            Get address from specific blockchain type black list
            </summary>
            <param name="blockchainType">Blockchain Type from Integration Layer</param>
            /// <param name="address">Address</param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.IBlockchainCashoutPreconditionsCheckClient.GetAllBlackListsAsync(System.String,System.Int32,System.String)">
            <summary>
            Get address from specific blockchain type black list
            </summary>
            <param name="blockchainType">Blockchain Type from Integration Layer</param>
            /// <param name="address">Address</param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
        <member name="M:Lykke.Service.BlockchainCashoutPreconditionsCheck.Client.IBlockchainCashoutPreconditionsCheckClient.DeleteBlackListAsync(System.String,System.String)">
            <summary>
            Delete address from specific blockchain type black list
            </summary>
            <param name="blockchainType">Blockchain Type from Integration Layer</param>
            /// <param name="address">Address to delete from black list</param>
            <returns></returns>
            <exception cref="T:System.Exception">Is thrown on wrong usage of service.</exception>
        </member>
    </members>
</doc>
